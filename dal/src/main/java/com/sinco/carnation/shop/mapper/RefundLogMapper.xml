<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.sinco.carnation.shop.mapper.RefundLogMapper">
	<resultMap id="BaseResultMap" type="com.sinco.carnation.shop.model.RefundLog">
		<id column="id" property="id" jdbcType="BIGINT" />
		<result column="add_time" property="addTime" jdbcType="TIMESTAMP" />
		<result column="delete_status" property="deleteStatus"
			jdbcType="BIT" />
		<result column="refund" property="refund" jdbcType="DECIMAL" />
		<result column="refund_id" property="refundId" jdbcType="VARCHAR" />
		<result column="refund_log" property="refundLog" jdbcType="VARCHAR" />
		<result column="refund_type" property="refundType" jdbcType="VARCHAR" />
		<result column="return_log_id" property="returnLogId" jdbcType="BIGINT" />
		<result column="return_log_user_id" property="returnLogUserId"
			jdbcType="BIGINT" />
		<result column="return_log_user_name" property="returnLogUserName"
			jdbcType="VARCHAR" />
		<result column="return_service_id" property="returnServiceId"
			jdbcType="VARCHAR" />
		<result column="refund_user_id" property="refundUserId"
			jdbcType="BIGINT" />
	</resultMap>
	<resultMap id="BOResultMap" type="com.sinco.carnation.shop.bo.RefundLogBO"
		extends="BaseResultMap" />
	<sql id="Example_Where_Clause">
		<where>
			<foreach collection="oredCriteria" item="criteria" separator="or">
				<if test="criteria.valid">
					<trim prefix="(" suffix=")" prefixOverrides="and">
						<foreach collection="criteria.criteria" item="criterion">
							<choose>
								<when test="criterion.noValue">
									and ${criterion.condition}
								</when>
								<when test="criterion.singleValue">
									and ${criterion.condition} #{criterion.value}
								</when>
								<when test="criterion.betweenValue">
									and ${criterion.condition} #{criterion.value} and
									#{criterion.secondValue}
								</when>
								<when test="criterion.listValue">
									and ${criterion.condition}
									<foreach collection="criterion.value" item="listItem"
										open="(" close=")" separator=",">
										#{listItem}
									</foreach>
								</when>
							</choose>
						</foreach>
					</trim>
				</if>
			</foreach>
		</where>
	</sql>
	<sql id="Update_By_Example_Where_Clause">
		<where>
			<foreach collection="example.oredCriteria" item="criteria"
				separator="or">
				<if test="criteria.valid">
					<trim prefix="(" suffix=")" prefixOverrides="and">
						<foreach collection="criteria.criteria" item="criterion">
							<choose>
								<when test="criterion.noValue">
									and ${criterion.condition}
								</when>
								<when test="criterion.singleValue">
									and ${criterion.condition} #{criterion.value}
								</when>
								<when test="criterion.betweenValue">
									and ${criterion.condition} #{criterion.value} and
									#{criterion.secondValue}
								</when>
								<when test="criterion.listValue">
									and ${criterion.condition}
									<foreach collection="criterion.value" item="listItem"
										open="(" close=")" separator=",">
										#{listItem}
									</foreach>
								</when>
							</choose>
						</foreach>
					</trim>
				</if>
			</foreach>
		</where>
	</sql>
	<sql id="Base_Column_List">
		id, add_time, delete_status, refund, refund_id, refund_log, refund_type,
		return_log_id,
		return_log_user_id, return_log_user_name, return_service_id, refund_user_id
	</sql>
	<select id="selectByExample" parameterType="com.sinco.carnation.shop.model.RefundLogExample"
		resultMap="BOResultMap">
		select
		<if test="distinct">
			distinct
		</if>
		<include refid="Base_Column_List" />
		from shop_refund_log
		<if test="_parameter != null">
			<include refid="Example_Where_Clause" />
		</if>
		<if test="orderByClause != null">
			order by ${orderByClause}
		</if>
	</select>
	<select id="selectByPrimaryKey" parameterType="java.lang.Long"
		resultMap="BOResultMap">
		select
		<include refid="Base_Column_List" />
		from shop_refund_log
		where id = #{id,jdbcType=BIGINT}
	</select>

	<select id="search" resultType="map">
		select * from shop_refund_log
		left join user_manager uc on
		uc.uid=shop_refund_log.refund_user_id
		where 1=1
		<if test="vo.returnLogUserName != null and vo.returnLogUserName != ''">
			and return_log_user_name=#{vo.returnLogUserName}
		</if>
		<if test="vo.refundId != null and vo.refundId != ''">
			and refund_id=#{vo.refundId}
		</if>
		<if test="vo.returnServiceId != null and vo.returnServiceId != ''">
			and return_service_id=#{vo.returnServiceId}
		</if>
		<if test="vo.startDate != null and vo.startDate != ''">
			and #{vo.startDate}<![CDATA[<=]]>date(add_time)
		</if>
		<if test="vo.endDate != null and vo.endDate != ''">
			and date(add_time)<![CDATA[<=]]>#{vo.endDate}
		</if>
		order by id desc
	</select>

	<delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
		delete from shop_refund_log
		where id = #{id,jdbcType=BIGINT}
	</delete>
	<delete id="deleteByExample" parameterType="com.sinco.carnation.shop.model.RefundLogExample">
		delete from shop_refund_log
		<if test="_parameter != null">
			<include refid="Example_Where_Clause" />
		</if>
	</delete>
	<insert id="insert" parameterType="com.sinco.carnation.shop.model.RefundLog"
		useGeneratedKeys="true" keyProperty="id">
		insert into shop_refund_log (id, add_time, delete_status,
		refund, refund_id, refund_log,
		refund_type, return_log_id, return_log_user_id,
		return_log_user_name, return_service_id, refund_user_id
		)
		values (#{id,jdbcType=BIGINT}, #{addTime,jdbcType=TIMESTAMP},
		#{deleteStatus,jdbcType=BIT},
		#{refund,jdbcType=DECIMAL}, #{refundId,jdbcType=VARCHAR}, #{refundLog,jdbcType=VARCHAR},
		#{refundType,jdbcType=VARCHAR}, #{returnLogId,jdbcType=BIGINT},
		#{returnLogUserId,jdbcType=BIGINT},
		#{returnLogUserName,jdbcType=VARCHAR},
		#{returnServiceId,jdbcType=VARCHAR}, #{refundUserId,jdbcType=BIGINT}
		)
	</insert>
	<insert id="insertSelective" parameterType="com.sinco.carnation.shop.model.RefundLog"
		useGeneratedKeys="true" keyProperty="id">
		insert into shop_refund_log
		<trim prefix="(" suffix=")" suffixOverrides=",">
			<if test="id != null">
				id,
			</if>
			<if test="addTime != null">
				add_time,
			</if>
			<if test="deleteStatus != null">
				delete_status,
			</if>
			<if test="refund != null">
				refund,
			</if>
			<if test="refundId != null">
				refund_id,
			</if>
			<if test="refundLog != null">
				refund_log,
			</if>
			<if test="refundType != null">
				refund_type,
			</if>
			<if test="returnLogId != null">
				return_log_id,
			</if>
			<if test="returnLogUserId != null">
				return_log_user_id,
			</if>
			<if test="returnLogUserName != null">
				return_log_user_name,
			</if>
			<if test="returnServiceId != null">
				return_service_id,
			</if>
			<if test="refundUserId != null">
				refund_user_id,
			</if>
		</trim>
		<trim prefix="values (" suffix=")" suffixOverrides=",">
			<if test="id != null">
				#{id,jdbcType=BIGINT},
			</if>
			<if test="addTime != null">
				#{addTime,jdbcType=TIMESTAMP},
			</if>
			<if test="deleteStatus != null">
				#{deleteStatus,jdbcType=BIT},
			</if>
			<if test="refund != null">
				#{refund,jdbcType=DECIMAL},
			</if>
			<if test="refundId != null">
				#{refundId,jdbcType=VARCHAR},
			</if>
			<if test="refundLog != null">
				#{refundLog,jdbcType=VARCHAR},
			</if>
			<if test="refundType != null">
				#{refundType,jdbcType=VARCHAR},
			</if>
			<if test="returnLogId != null">
				#{returnLogId,jdbcType=BIGINT},
			</if>
			<if test="returnLogUserId != null">
				#{returnLogUserId,jdbcType=BIGINT},
			</if>
			<if test="returnLogUserName != null">
				#{returnLogUserName,jdbcType=VARCHAR},
			</if>
			<if test="returnServiceId != null">
				#{returnServiceId,jdbcType=VARCHAR},
			</if>
			<if test="refundUserId != null">
				#{refundUserId,jdbcType=BIGINT},
			</if>
		</trim>
	</insert>
	<select id="countByExample" parameterType="com.sinco.carnation.shop.model.RefundLogExample"
		resultType="java.lang.Integer">
		select count(*) from shop_refund_log
		<if test="_parameter != null">
			<include refid="Example_Where_Clause" />
		</if>
	</select>
	<update id="updateByExampleSelective" parameterType="map">
		update shop_refund_log
		<set>
			<if test="record.id != null">
				id = #{record.id,jdbcType=BIGINT},
			</if>
			<if test="record.addTime != null">
				add_time = #{record.addTime,jdbcType=TIMESTAMP},
			</if>
			<if test="record.deleteStatus != null">
				delete_status = #{record.deleteStatus,jdbcType=BIT},
			</if>
			<if test="record.refund != null">
				refund = #{record.refund,jdbcType=DECIMAL},
			</if>
			<if test="record.refundId != null">
				refund_id = #{record.refundId,jdbcType=VARCHAR},
			</if>
			<if test="record.refundLog != null">
				refund_log = #{record.refundLog,jdbcType=VARCHAR},
			</if>
			<if test="record.refundType != null">
				refund_type = #{record.refundType,jdbcType=VARCHAR},
			</if>
			<if test="record.returnLogId != null">
				return_log_id = #{record.returnLogId,jdbcType=BIGINT},
			</if>
			<if test="record.returnLogUserId != null">
				return_log_user_id = #{record.returnLogUserId,jdbcType=BIGINT},
			</if>
			<if test="record.returnLogUserName != null">
				return_log_user_name = #{record.returnLogUserName,jdbcType=VARCHAR},
			</if>
			<if test="record.returnServiceId != null">
				return_service_id = #{record.returnServiceId,jdbcType=VARCHAR},
			</if>
			<if test="record.refundUserId != null">
				refund_user_id = #{record.refundUserId,jdbcType=BIGINT},
			</if>
		</set>
		<if test="_parameter != null">
			<include refid="Update_By_Example_Where_Clause" />
		</if>
	</update>
	<update id="updateByExample" parameterType="map">
		update shop_refund_log
		set id = #{record.id,jdbcType=BIGINT},
		add_time = #{record.addTime,jdbcType=TIMESTAMP},
		delete_status = #{record.deleteStatus,jdbcType=BIT},
		refund = #{record.refund,jdbcType=DECIMAL},
		refund_id = #{record.refundId,jdbcType=VARCHAR},
		refund_log = #{record.refundLog,jdbcType=VARCHAR},
		refund_type = #{record.refundType,jdbcType=VARCHAR},
		return_log_id = #{record.returnLogId,jdbcType=BIGINT},
		return_log_user_id = #{record.returnLogUserId,jdbcType=BIGINT},
		return_log_user_name = #{record.returnLogUserName,jdbcType=VARCHAR},
		return_service_id = #{record.returnServiceId,jdbcType=VARCHAR},
		refund_user_id = #{record.refundUserId,jdbcType=BIGINT}
		<if test="_parameter != null">
			<include refid="Update_By_Example_Where_Clause" />
		</if>
	</update>
	<update id="updateByPrimaryKeySelective" parameterType="com.sinco.carnation.shop.model.RefundLog">
		update shop_refund_log
		<set>
			<if test="addTime != null">
				add_time = #{addTime,jdbcType=TIMESTAMP},
			</if>
			<if test="deleteStatus != null">
				delete_status = #{deleteStatus,jdbcType=BIT},
			</if>
			<if test="refund != null">
				refund = #{refund,jdbcType=DECIMAL},
			</if>
			<if test="refundId != null">
				refund_id = #{refundId,jdbcType=VARCHAR},
			</if>
			<if test="refundLog != null">
				refund_log = #{refundLog,jdbcType=VARCHAR},
			</if>
			<if test="refundType != null">
				refund_type = #{refundType,jdbcType=VARCHAR},
			</if>
			<if test="returnLogId != null">
				return_log_id = #{returnLogId,jdbcType=BIGINT},
			</if>
			<if test="returnLogUserId != null">
				return_log_user_id = #{returnLogUserId,jdbcType=BIGINT},
			</if>
			<if test="returnLogUserName != null">
				return_log_user_name = #{returnLogUserName,jdbcType=VARCHAR},
			</if>
			<if test="returnServiceId != null">
				return_service_id = #{returnServiceId,jdbcType=VARCHAR},
			</if>
			<if test="refundUserId != null">
				refund_user_id = #{refundUserId,jdbcType=BIGINT},
			</if>
		</set>
		where id = #{id,jdbcType=BIGINT}
	</update>
	<update id="updateByPrimaryKey" parameterType="com.sinco.carnation.shop.model.RefundLog">
		update shop_refund_log
		set add_time = #{addTime,jdbcType=TIMESTAMP},
		delete_status = #{deleteStatus,jdbcType=BIT},
		refund = #{refund,jdbcType=DECIMAL},
		refund_id = #{refundId,jdbcType=VARCHAR},
		refund_log = #{refundLog,jdbcType=VARCHAR},
		refund_type = #{refundType,jdbcType=VARCHAR},
		return_log_id = #{returnLogId,jdbcType=BIGINT},
		return_log_user_id = #{returnLogUserId,jdbcType=BIGINT},
		return_log_user_name = #{returnLogUserName,jdbcType=VARCHAR},
		return_service_id = #{returnServiceId,jdbcType=VARCHAR},
		refund_user_id = #{refundUserId,jdbcType=BIGINT}
		where id = #{id,jdbcType=BIGINT}
	</update>
</mapper>